import * as fs from 'fs-extra';
import * as path from 'path';
import { logger } from '../utils/logger.js';
import type { AnalysisResult, ReportGenerationOptions, AccessibilityIssue } from '../types/index.js';

export class ReportGenerator {
  async generate(result: AnalysisResult, options: ReportGenerationOptions): Promise<string> {
    try {
      const reportPath = path.resolve(options.outputPath);
      const reportDir = path.dirname(reportPath);
      
      // Ensure output directory exists
      await fs.ensureDir(reportDir);
      
      // Generate HTML report
      const htmlContent = this.generateHtmlReport(result, options);
      
      // Write to file
      await fs.writeFile(reportPath, htmlContent, 'utf8');
      
      logger.info(`Accessibility report generated: ${reportPath}`);
      return reportPath;
    } catch (error) {
      logger.error('Failed to generate report:', error);
      throw error;
    }
  }

  private generateHtmlReport(result: AnalysisResult, options: ReportGenerationOptions): string {
    const title = options.title || 'Accessibility Analysis Report';
    const includeWcagLinks = options.includeWcagLinks !== false;
    
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${this.escapeHtml(title)}</title>
    <style>
        ${this.getReportStyles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1>${this.escapeHtml(title)}</h1>
            <div class="report-meta">
                <p><strong>Analysis Type:</strong> ${this.escapeHtml(result.analysisType)}</p>
                <p><strong>Generated:</strong> ${new Date(result.timestamp).toLocaleString()}</p>
                ${result.projectPath ? `<p><strong>Project:</strong> ${this.escapeHtml(result.projectPath)}</p>` : ''}
                ${result.url ? `<p><strong>URL:</strong> ${this.escapeHtml(result.url)}</p>` : ''}
            </div>
        </header>

        <section class="summary">
            <h2>Executive Summary</h2>
            <div class="summary-grid">
                <div class="summary-card total">
                    <h3>Total Issues</h3>
                    <div class="summary-number">${result.summary.total}</div>
                </div>
                <div class="summary-card critical">
                    <h3>Critical</h3>
                    <div class="summary-number">${result.summary.critical}</div>
                </div>
                <div class="summary-card serious">
                    <h3>Serious</h3>
                    <div class="summary-number">${result.summary.serious}</div>
                </div>
                <div class="summary-card moderate">
                    <h3>Moderate</h3>
                    <div class="summary-number">${result.summary.moderate}</div>
                </div>
                <div class="summary-card minor">
                    <h3>Minor</h3>
                    <div class="summary-number">${result.summary.minor}</div>
                </div>
            </div>
        </section>

        <section class="issues">
            <h2>Accessibility Issues</h2>
            ${result.issues.length === 0 ? 
                '<p class="no-issues">ðŸŽ‰ No accessibility issues found!</p>' : 
                this.generateIssuesList(result.issues, includeWcagLinks)
            }
        </section>

        <footer class="report-footer">
            <p>Report generated by <strong>A11y Robot</strong> - Accessibility Analysis Tool</p>
            <p>Based on WCAG 2.0 Guidelines</p>
        </footer>
    </div>
</body>
</html>`;

    return html;
  }

  private generateIssuesList(issues: AccessibilityIssue[], includeWcagLinks: boolean): string {
    const groupedIssues = this.groupIssuesBySeverity(issues);
    let html = '';

    for (const [severity, severityIssues] of Object.entries(groupedIssues)) {
      if (severityIssues.length === 0) continue;

      html += `
        <div class="severity-section">
          <h3 class="severity-title ${severity}">
            ${this.getSeverityIcon(severity)} ${this.capitalizeFirst(severity)} Issues (${severityIssues.length})
          </h3>
          <div class="issues-list">
            ${severityIssues.map(issue => this.generateIssueItem(issue, includeWcagLinks)).join('')}
          </div>
        </div>
      `;
    }

    return html;
  }

  private generateIssueItem(issue: AccessibilityIssue, includeWcagLinks: boolean): string {
    return `
      <div class="issue-item ${issue.severity}">
        <div class="issue-header">
          <h4 class="issue-title">${this.escapeHtml(issue.rule)}</h4>
          <div class="issue-badges">
            <span class="severity-badge ${issue.severity}">${this.capitalizeFirst(issue.severity)}</span>
            <span class="wcag-badge level-${issue.wcagLevel.toLowerCase()}">${issue.wcagCriterion}</span>
          </div>
        </div>
        
        <div class="issue-content">
          <p class="issue-description">${this.escapeHtml(issue.description)}</p>
          
          ${issue.helpText ? `<p class="issue-help">${this.escapeHtml(issue.helpText)}</p>` : ''}
          
          <div class="issue-details">
            ${issue.file ? `<p><strong>File:</strong> ${this.escapeHtml(issue.file)}${issue.line ? `:${issue.line}` : ''}</p>` : ''}
            ${issue.element ? `<p><strong>Element:</strong> <code>${this.escapeHtml(issue.element)}</code></p>` : ''}
            ${issue.selector ? `<p><strong>Selector:</strong> <code>${this.escapeHtml(issue.selector)}</code></p>` : ''}
          </div>
          
          ${includeWcagLinks && issue.wcagUrl ? `
            <div class="issue-links">
              <a href="${this.escapeHtml(issue.wcagUrl)}" target="_blank" rel="noopener noreferrer" class="wcag-link">
                ðŸ“š View WCAG ${issue.wcagCriterion} Guideline
              </a>
            </div>
          ` : ''}
        </div>
      </div>
    `;
  }

  private groupIssuesBySeverity(issues: AccessibilityIssue[]): Record<string, AccessibilityIssue[]> {
    const groups: Record<string, AccessibilityIssue[]> = {
      critical: [],
      serious: [],
      moderate: [],
      minor: []
    };

    for (const issue of issues) {
      if (groups[issue.severity]) {
        groups[issue.severity].push(issue);
      }
    }

    return groups;
  }

  private getSeverityIcon(severity: string): string {
    switch (severity) {
      case 'critical': return 'ðŸ”´';
      case 'serious': return 'ðŸŸ ';
      case 'moderate': return 'ðŸŸ¡';
      case 'minor': return 'ðŸŸ¢';
      default: return 'âšª';
    }
  }

  private capitalizeFirst(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  private getReportStyles(): string {
    return `
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: #333;
        background-color: #f5f5f5;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .report-header {
        background: white;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .report-header h1 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 2.5em;
      }

      .report-meta p {
        margin-bottom: 5px;
        color: #666;
      }

      .summary {
        background: white;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .summary h2 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 2em;
      }

      .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
      }

      .summary-card {
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        color: white;
      }

      .summary-card.total { background: #34495e; }
      .summary-card.critical { background: #e74c3c; }
      .summary-card.serious { background: #f39c12; }
      .summary-card.moderate { background: #f1c40f; }
      .summary-card.minor { background: #27ae60; }

      .summary-card h3 {
        font-size: 1.2em;
        margin-bottom: 10px;
      }

      .summary-number {
        font-size: 2.5em;
        font-weight: bold;
      }

      .issues {
        background: white;
        padding: 30px;
        border-radius: 8px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }

      .issues h2 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 2em;
      }

      .no-issues {
        text-align: center;
        font-size: 1.2em;
        color: #27ae60;
        padding: 40px;
      }

      .severity-section {
        margin-bottom: 30px;
      }

      .severity-title {
        font-size: 1.5em;
        margin-bottom: 15px;
        padding: 10px 0;
        border-bottom: 2px solid #eee;
      }

      .severity-title.critical { color: #e74c3c; }
      .severity-title.serious { color: #f39c12; }
      .severity-title.moderate { color: #f1c40f; }
      .severity-title.minor { color: #27ae60; }

      .issues-list {
        display: grid;
        gap: 15px;
      }

      .issue-item {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 20px;
        background: #fafafa;
      }

      .issue-item.critical { border-left: 4px solid #e74c3c; }
      .issue-item.serious { border-left: 4px solid #f39c12; }
      .issue-item.moderate { border-left: 4px solid #f1c40f; }
      .issue-item.minor { border-left: 4px solid #27ae60; }

      .issue-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
      }

      .issue-title {
        font-size: 1.3em;
        color: #2c3e50;
        margin-bottom: 5px;
      }

      .issue-badges {
        display: flex;
        gap: 8px;
      }

      .severity-badge, .wcag-badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.85em;
        font-weight: bold;
        text-transform: uppercase;
      }

      .severity-badge.critical { background: #e74c3c; color: white; }
      .severity-badge.serious { background: #f39c12; color: white; }
      .severity-badge.moderate { background: #f1c40f; color: #333; }
      .severity-badge.minor { background: #27ae60; color: white; }

      .wcag-badge {
        background: #3498db;
        color: white;
      }

      .issue-description {
        font-size: 1.1em;
        margin-bottom: 10px;
        color: #555;
      }

      .issue-help {
        font-style: italic;
        color: #666;
        margin-bottom: 15px;
      }

      .issue-details {
        margin-bottom: 15px;
        font-size: 0.95em;
      }

      .issue-details p {
        margin-bottom: 5px;
      }

      .issue-details code {
        background: #f8f9fa;
        padding: 2px 4px;
        border-radius: 3px;
        font-family: 'Monaco', 'Menlo', monospace;
      }

      .issue-links {
        margin-top: 15px;
      }

      .wcag-link {
        display: inline-block;
        background: #3498db;
        color: white;
        padding: 8px 16px;
        text-decoration: none;
        border-radius: 4px;
        font-size: 0.9em;
        transition: background 0.2s;
      }

      .wcag-link:hover {
        background: #2980b9;
      }

      .report-footer {
        text-align: center;
        padding: 20px;
        color: #666;
        font-size: 0.9em;
      }

      @media (max-width: 768px) {
        .container {
          padding: 10px;
        }
        
        .issue-header {
          flex-direction: column;
          gap: 10px;
        }
        
        .summary-grid {
          grid-template-columns: 1fr;
        }
      }
    `;
  }
} 